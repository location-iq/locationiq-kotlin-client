/**
* LocationIQ
* LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
*
* The version of the OpenAPI document: 1.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package locationiq.apis

import locationiq.models.Error
import locationiq.models.Location

import locationiq.infrastructure.ApiClient
import locationiq.infrastructure.ClientException
import locationiq.infrastructure.ClientError
import locationiq.infrastructure.ServerException
import locationiq.infrastructure.ServerError
import locationiq.infrastructure.MultiValueMap
import locationiq.infrastructure.RequestConfig
import locationiq.infrastructure.RequestMethod
import locationiq.infrastructure.ResponseType
import locationiq.infrastructure.Success
import locationiq.infrastructure.toMultiValue

class SearchApi(basePath: kotlin.String = "https://eu1.locationiq.com/v1") : ApiClient(basePath) {

    /**
    * Forward Geocoding
    * The Search API allows converting addresses, such as a street address, into geographic coordinates (latitude and longitude). These coordinates can serve various use-cases, from placing markers on a map to helping algorithms determine nearby bus stops. This process is also known as Forward Geocoding.
    * @param q Address to geocode 
    * @param format Format to geocode. Only JSON supported for SDKs 
    * @param normalizecity For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs. 
    * @param addressdetails Include a breakdown of the address into elements. Defaults to 0. (optional)
    * @param viewbox The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - &#x60;max_lon,max_lat,min_lon,min_lat&#x60; or &#x60;min_lon,min_lat,max_lon,max_lat&#x60; - are accepted in any order as long as they span a real box.  (optional)
    * @param bounded Restrict the results to only items contained with the viewbox (optional)
    * @param limit Limit the number of returned results. Default is 10. (optional, default to 10)
    * @param acceptMinusLanguage Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
    * @param countrycodes Limit search to a list of countries. (optional)
    * @param namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
    * @param dedupe Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split in many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match; this is controlled by the dedupe parameter which defaults to 1. Since the limit is, for reasons of efficiency, enforced before and not after de-duplicating, it is possible that de-duplicating leaves you with less results than requested. (optional)
    * @param extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
    * @param statecode Adds state or province code when available to the statecode key inside the address element. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0 (optional)
    * @param matchquality Returns additional information about quality of the result in a matchquality object. Read more Defaults to 0 [0,1] (optional)
    * @param postaladdress Returns address inside the postaladdress key, that is specifically formatted for each country. Currently supported for addresses in Germany. Defaults to 0 [0,1] (optional)
    * @return kotlin.Array<Location>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun search(q: kotlin.String, format: kotlin.String, normalizecity: kotlin.Int, addressdetails: kotlin.Int?, viewbox: kotlin.String?, bounded: kotlin.Int?, limit: kotlin.Int?, acceptMinusLanguage: kotlin.String?, countrycodes: kotlin.String?, namedetails: kotlin.Int?, dedupe: kotlin.Int?, extratags: kotlin.Int?, statecode: kotlin.Int?, matchquality: kotlin.Int?, postaladdress: kotlin.Int?) : kotlin.Array<Location> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("q", listOf(q.toString()))
                put("format", listOf(format.toString()))
                put("normalizecity", listOf(normalizecity.toString()))
                if (addressdetails != null) {
                    put("addressdetails", listOf(addressdetails.toString()))
                }
                if (viewbox != null) {
                    put("viewbox", listOf(viewbox.toString()))
                }
                if (bounded != null) {
                    put("bounded", listOf(bounded.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (acceptMinusLanguage != null) {
                    put("acceptMinusLanguage", listOf(acceptMinusLanguage.toString()))
                }
                if (countrycodes != null) {
                    put("countrycodes", listOf(countrycodes.toString()))
                }
                if (namedetails != null) {
                    put("namedetails", listOf(namedetails.toString()))
                }
                if (dedupe != null) {
                    put("dedupe", listOf(dedupe.toString()))
                }
                if (extratags != null) {
                    put("extratags", listOf(extratags.toString()))
                }
                if (statecode != null) {
                    put("statecode", listOf(statecode.toString()))
                }
                if (matchquality != null) {
                    put("matchquality", listOf(matchquality.toString()))
                }
                if (postaladdress != null) {
                    put("postaladdress", listOf(postaladdress.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/search.php",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<kotlin.Array<Location>>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Array<Location>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(localVarError.body as? String ?: "Client error", localVarError.statusCode)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(localVarError.message ?: "Server error", localVarError.statusCode)
            }
        }
    }

}
