/**
* LocationIQ
* LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
*
* The version of the OpenAPI document: 1.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package locationiq.apis

import locationiq.models.Error
import locationiq.models.Location

import locationiq.infrastructure.ApiClient
import locationiq.infrastructure.ClientException
import locationiq.infrastructure.ClientError
import locationiq.infrastructure.ServerException
import locationiq.infrastructure.ServerError
import locationiq.infrastructure.MultiValueMap
import locationiq.infrastructure.RequestConfig
import locationiq.infrastructure.RequestMethod
import locationiq.infrastructure.ResponseType
import locationiq.infrastructure.Success
import locationiq.infrastructure.toMultiValue

class ReverseApi(basePath: kotlin.String = "https://eu1.locationiq.com/v1") : ApiClient(basePath) {

    /**
    * Reverse Geocoding
    * Reverse geocoding is the process of converting a coordinate or location (latitude, longitude) to a readable address or place name. This permits the identification of nearby street addresses, places, and/or area subdivisions such as a neighborhood, county, state, or country.
    * @param lat Latitude of the location to generate an address for. 
    * @param lon Longitude of the location to generate an address for. 
    * @param format Format to geocode. Only JSON supported for SDKs 
    * @param normalizecity Normalizes village to city level data to city 
    * @param addressdetails Include a breakdown of the address into elements. Defaults to 1. (optional, default to 1)
    * @param acceptMinusLanguage Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
    * @param namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
    * @param extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
    * @param statecode Adds state or province code when available to the statecode key inside the address element. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0 (optional)
    * @param showdistance Returns the straight line distance (meters) between the input location and the result&#39;s location. Value is set in the distance key of the response. Defaults to 0 [0,1] (optional)
    * @param postaladdress Returns address inside the postaladdress key, that is specifically formatted for each country. Currently supported for addresses in Germany. Defaults to 0 [0,1] (optional)
    * @return Location
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reverse(lat: java.math.BigDecimal, lon: java.math.BigDecimal, format: kotlin.String, normalizecity: kotlin.Int, addressdetails: kotlin.Int?, acceptMinusLanguage: kotlin.String?, namedetails: kotlin.Int?, extratags: kotlin.Int?, statecode: kotlin.Int?, showdistance: kotlin.Int?, postaladdress: kotlin.Int?) : Location {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("lat", listOf(lat.toString()))
                put("lon", listOf(lon.toString()))
                put("format", listOf(format.toString()))
                put("normalizecity", listOf(normalizecity.toString()))
                if (addressdetails != null) {
                    put("addressdetails", listOf(addressdetails.toString()))
                }
                if (acceptMinusLanguage != null) {
                    put("acceptMinusLanguage", listOf(acceptMinusLanguage.toString()))
                }
                if (namedetails != null) {
                    put("namedetails", listOf(namedetails.toString()))
                }
                if (extratags != null) {
                    put("extratags", listOf(extratags.toString()))
                }
                if (statecode != null) {
                    put("statecode", listOf(statecode.toString()))
                }
                if (showdistance != null) {
                    put("showdistance", listOf(showdistance.toString()))
                }
                if (postaladdress != null) {
                    put("postaladdress", listOf(postaladdress.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/reverse.php",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<Location>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Location
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(localVarError.body as? String ?: "Client error", localVarError.statusCode)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(localVarError.message ?: "Server error", localVarError.statusCode)
            }
        }
    }

}
