/**
* LocationIQ
* LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
*
* OpenAPI spec version: 1.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package locationiq.apis

import locationiq.models.Error
import locationiq.models.Location

import locationiq.infrastructure.*

class ReverseApi(basePath: kotlin.String = "https://eu1.locationiq.com/v1") : ApiClient(basePath) {

    /**
    * Reverse Geocoding
    * Reverse geocoding is the process of converting a coordinate or location (latitude, longitude) to a readable address or place name. This permits the identification of nearby street addresses, places, and/or area subdivisions such as a neighborhood, county, state, or country.
    * @param lat Latitude of the location to generate an address for. 
    * @param lon Longitude of the location to generate an address for. 
    * @param format Format to geocode. Only JSON supported for SDKs 
    * @param normalizecity Normalizes village to city level data to city 
    * @param addressdetails Include a breakdown of the address into elements. Defaults to 1. (optional, default to 1)
    * @param acceptLanguage Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
    * @param namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
    * @param extratags Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
    * @param statecode Adds state or province code when available to the statecode key inside the address element. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0 (optional)
    * @return Location
    */
    @Suppress("UNCHECKED_CAST")
    fun reverse(lat: java.math.BigDecimal, lon: java.math.BigDecimal, format: kotlin.String, normalizecity: kotlin.Int, addressdetails: kotlin.Int, acceptLanguage: kotlin.String, namedetails: kotlin.Int, extratags: kotlin.Int, statecode: kotlin.Int) : Location {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("lat" to listOf("$lat"), "lon" to listOf("$lon"), "format" to listOf("$format"), "normalizecity" to listOf("$normalizecity"), "addressdetails" to listOf("$addressdetails"), "accept-language" to listOf("$acceptLanguage"), "namedetails" to listOf("$namedetails"), "extratags" to listOf("$extratags"), "statecode" to listOf("$statecode"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/reverse.php",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Location>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Location
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
