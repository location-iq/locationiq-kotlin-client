/**
* LocationIQ
* LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
*
* The version of the OpenAPI document: 1.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.apis

import org.openapitools.client.models.DirectionsMinusMatching
import org.openapitools.client.models.Error

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class MatchingApi(basePath: kotlin.String = "https://eu1.locationiq.com/v1") : ApiClient(basePath) {

    /**
    * Matching Service
    * Matching API matches or snaps given GPS points to the road network in the most plausible way.  Please note the request might result multiple sub-traces.  Large jumps in the timestamps (&gt; 60s) or improbable transitions lead to trace splits if a complete matching could not be found. The algorithm might not be able to match all points. Outliers are removed if they can not be matched successfully.
    * @param coordinates String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5 
    * @param generateHints Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)
    * @param approaches Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)
    * @param exclude Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)
    * @param bearings Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)
    * @param radiuses Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)
    * @param steps Returned route steps for each route leg [ true, false (default) ] (optional)
    * @param annotations Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to '"false"')
    * @param geometries Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to '"polyline"')
    * @param overview Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to '"simplified"')
    * @param timestamps Timestamps for the input locations in seconds since UNIX epoch. Timestamps need to be monotonically increasing. [ {timestamp};{timestamp}[;{timestamp} ...]  integer seconds since UNIX epoch (optional)
    * @param gaps Allows the input track splitting based on huge timestamp gaps between points. [ split (default), ignore ] (optional, default to '"split"')
    * @param tidy Allows the input track modification to obtain better matching quality for noisy tracks. [ true, false (default) ] (optional, default to '"false"')
    * @param waypoints Treats input coordinates indicated by given indices as waypoints in returned Match object. Default is to treat all input coordinates as waypoints. [ {index};{index};{index}... ] (optional)
    * @return DirectionsMinusMatching
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun matching(coordinates: kotlin.String, generateHints: kotlin.String?, approaches: kotlin.String?, exclude: kotlin.String?, bearings: kotlin.String?, radiuses: kotlin.String?, steps: kotlin.String?, annotations: kotlin.String?, geometries: kotlin.String?, overview: kotlin.String?, timestamps: kotlin.String?, gaps: kotlin.String?, tidy: kotlin.String?, waypoints: kotlin.String?) : DirectionsMinusMatching {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (generateHints != null) {
                    put("generateHints", listOf(generateHints.toString()))
                }
                if (approaches != null) {
                    put("approaches", listOf(approaches.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
                if (bearings != null) {
                    put("bearings", listOf(bearings.toString()))
                }
                if (radiuses != null) {
                    put("radiuses", listOf(radiuses.toString()))
                }
                if (steps != null) {
                    put("steps", listOf(steps.toString()))
                }
                if (annotations != null) {
                    put("annotations", listOf(annotations.toString()))
                }
                if (geometries != null) {
                    put("geometries", listOf(geometries.toString()))
                }
                if (overview != null) {
                    put("overview", listOf(overview.toString()))
                }
                if (timestamps != null) {
                    put("timestamps", listOf(timestamps.toString()))
                }
                if (gaps != null) {
                    put("gaps", listOf(gaps.toString()))
                }
                if (tidy != null) {
                    put("tidy", listOf(tidy.toString()))
                }
                if (waypoints != null) {
                    put("waypoints", listOf(waypoints.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/matching/driving/{coordinates}".replace("{"+"coordinates"+"}", "$coordinates"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<DirectionsMinusMatching>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DirectionsMinusMatching
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(localVarError.body as? String ?: "Client error", localVarError.statusCode)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(localVarError.message ?: "Server error", localVarError.statusCode)
            }
        }
    }

}
